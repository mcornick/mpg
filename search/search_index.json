{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"mpg","text":"<p>mpg is a command-line tool that generates strings of random characters that can be used as reasonably secure passwords.</p> <p>Passwords are, by default, chosen from the union of three character classes: upper-case letters, lower-case letters, and digits.</p> <p>Options can be given to omit any one or any two of these character classes. For instance, you can omit uppercase letters and digits by passing <code>--upper=false --digit=false</code> to <code>mpg</code>. This will return a password composed only of lowercase letters.</p> <p>Passwords are guaranteed to contain at least one of each selected character class. The default length is 16. mpg will create a password of any length greater than or equal to the number of character classes selected.</p> <p>If the password length is less than or equal to the total number of characters selected, mpg will not repeat characters within the generated password.</p>"},{"location":"contributing/","title":"Contributing","text":"<p>Bug reports and pull requests are welcome on GitHub at https://github.com/mcornick/mpg.</p> <p>This project is intended to be a safe, welcoming space for collaboration, and contributors are expected to adhere to the Contributor Covenant code of conduct.</p> <p>mpg is available as open source under the terms of the MIT License.</p>"},{"location":"installation/","title":"Installation","text":"<p>I use this repository to experiment with goreleaser, so there are a ridiculous number of builds and packages available for such a trivial app. Don't judge.</p> HomebrewScoopContainer ImageBinaries and RPM/DEB/APK packagesSignatures <p>I maintain a Homebrew tap.</p> <pre><code>brew install mcornick/tap/mpg\n</code></pre> <p>I maintain a Scoop bucket.</p> <pre><code>scoop bucket add mcornick https://github.com/mcornick/scoop-bucket.git\nscoop install mpg\n</code></pre> <p>I maintain container images on GitHub here.</p> <pre><code>docker run --rm ghcr.io/mcornick/mpg\n</code></pre> <p>I maintain binary releases on GitHub here.</p> <p>Note</p> <p>Signatures are an ongoing experiment. They might be broken. Do not depend on them (or, really, on mpg) for mission-critical things.</p> <p>Binary checksums and container manifests are signed with Cosign. The certificate needed to verify binary checksums can be found in each release.</p>"},{"location":"usage/","title":"Usage","text":""},{"location":"usage/#command-line","title":"Command Line","text":"<pre><code>$ ./mpg --help\nmpg is a command-line tool that generates strings of\nrandom characters that can be used as reasonably secure passwords.\n\nUsage:\n  mpg [flags]\nmpg [command]\n\nAvailable Commands:\n  completion  Generate completion script\n  help        Help about any command\nman         Generate man pages\n\nFlags:\n  -d, --digit        include digits (default true)\n-h, --help         help for mpg\n  -l, --length int   length (default 16)\n-u, --lower        include lowercase (default true)\n-U, --upper        include uppercase (default true)\n-v, --version      version for mpg\n\nUse \"mpg [command] --help\" for more information about a command.\n</code></pre>"},{"location":"usage/#configuration-file","title":"Configuration File","text":"<p>mpg supports an optional configuration file. It must be in a format supported by viper, such as YAML, TOML, or JSON; be named <code>config.XXXX</code> with the proper format suffix; use the command line options as keys; and be located in one of these directories:</p> <ul> <li><code>$HOME/Library/Application Support/mpg</code> (macOS)</li> <li><code>$XDG_CONFIG_HOME/mpg</code> (Unix)</li> <li><code>/etc/mpg</code> (macOS or Unix)</li> <li><code>%AppData%\\mpg</code> (Windows)</li> </ul> <p>For example, these files replicate the default configuration of mpg:</p> config.yamlconfig.tomlconfig.json <pre><code>---\nlength: 16\nupper: true\nlower: true\ndigit: true\n</code></pre> <pre><code>digit = true\nlength = 16\nlower = true\nupper = true\n</code></pre> <pre><code>{\n\"digit\": true,\n\"length\": 16,\n\"lower\": true,\n\"upper\": true\n}\n</code></pre> <p>Configuration is also possible using environment variables. For example, these environment variables would replicate the default configuration of mpg:</p> <pre><code>export MPG_LENGTH=16\nexport MPG_UPPER=1\nexport MPG_LOWER=1\nexport MPG_DIGIT=1\n</code></pre> <p>(To disable uppercase, lowercase, or digits, set the appropriate variable to 0.)</p> <p>Values given on the command line take precedence over values given in the configuration file or in environment variables.</p>"}]}